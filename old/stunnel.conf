# Since we are doing HTTPS requests with curl now, no need for stunnel.
# And for websockets, we can ask websocat to locally expose a TCP port that works with plaintext.

# https://www.stunnel.org/config_unix.html
# See also `man stunnel`

# By default it starts a daemon. Maybe that's what we want? But not for now.
foreground = yes
debug = info

# For example purposes, more than actual practical purposes
# For some reasons these ones don't actually work

[adviceslip]
client = yes
accept = 127.0.0.1:20001
connect = api.adviceslip.com:443
checkHost = api.adviceslip.com
verifyChain = yes
OCSPaia = yes
CApath = /etc/ssl/certs

[github]
client = yes
accept = 127.0.0.1:20002
connect = github.com:443
checkHost = github.com
verifyChain = yes
OCSPaia = yes
CApath = /etc/ssl/certs

# Various messaging apps

# Let's try the shell command
[shell]
client = yes
accept = 127.0.0.1:10000
exec = /bin/cat
# execArgs = websocat wss://mattermost.mit.edu/api/v4/websocket -H \"Authorization: Bearer otfjuew96pfh8rrfxga3nf7mby\"

[mattermost]
client = yes
accept = 127.0.0.1:10001
connect = mattermost.mit.edu:443
checkHost = mattermost.mit.edu
verifyChain = yes
OCSPaia = yes
CApath = /etc/ssl/certs

[matrix]
client = yes
accept = 127.0.0.1:10002
connect = matrix-synapse.mit.edu:443
checkHost = matrix-synapse.mit.edu
verifyChain = yes
OCSPaia = yes
CApath = /etc/ssl/certs

[discord-http]
client = yes
accept = 127.0.0.1:10003
connect = discord.com
checkHost = discord.com
verifyChain = yes
OCSPaia = yes
CApath = /etc/ssl/certs

[discord-websocket]
client = yes
accept = 127.0.0.1:10004
connect = gateway.discord.gg
checkHost = gateway.discord.gg
verifyChain = yes
OCSPaia = yes
CApath = /etc/ssl/certs

